package com.example.unwaste

import android.content.DialogInterface
import android.os.Bundle
import android.util.Log
import com.google.android.material.bottomsheet.BottomSheetDialogFragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.ViewTreeObserver
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.DatePicker
import android.widget.EditText
import android.widget.Spinner
import com.example.unwaste.Constants.BASE_URL
import com.example.unwaste.databinding.FragmentAddEntryDialogItemBinding
import com.example.unwaste.databinding.FragmentAddEntryDialogBinding
import java.util.Calendar

// TODO: Customize parameter argument names
const val ARG_ITEM_COUNT = "item_count"

/**
 *
 * A fragment that shows the add entry form as a modal bottom sheet. Generated by Android Studio,
 * developed with help from ChatGPT.
 *
 * You can show this modal bottom sheet from your activity like this:
 * <pre>
 *    AddEntryDialogFragment.newInstance(30).show(supportFragmentManager, "dialog")
 * </pre>
 */
class AddEntryDialogFragment : BottomSheetDialogFragment() {

    private var _binding: FragmentAddEntryDialogBinding? = null

    private var dismissListener: OnDismissListener? = null

    // This property is only valid between onCreateView and
    // onDestroyView.
    private val binding get() = _binding!!

    private lateinit var submitButton: Button

    //Entry fields
    private lateinit var editTextFoodName: EditText
    private lateinit var spinnerFoodCategory: Spinner
    private lateinit var editTextFoodQuantity: EditText
    private lateinit var spinnerPackageSizeUnit: Spinner
    private lateinit var editTextDescription: EditText
    private lateinit var datePickerExpiration: DatePicker
    private lateinit var spinnerDietaryRestrictions: Spinner

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {

        _binding = FragmentAddEntryDialogBinding.inflate(inflater, container, false)
        val view = inflater.inflate(R.layout.fragment_add_entry_dialog_item, container, false)

        // Initialize UI components
        editTextFoodName = view.findViewById(R.id.editTextFoodName)
        spinnerFoodCategory = view.findViewById(R.id.spinnerFoodCategory)
        editTextFoodQuantity = view.findViewById(R.id.editTextFoodQuantity)
        spinnerPackageSizeUnit = view.findViewById(R.id.spinnerPackageSizeUnit)
        editTextDescription = view.findViewById(R.id.editTextDescription)
        datePickerExpiration = view.findViewById(R.id.datePickerExpiration)
        spinnerDietaryRestrictions = view.findViewById(R.id.spinnerDietaryRestrictions)

        // Set up the spinner for Food Category
        val foodCategories = arrayOf("Category 1", "Category 2", "Category 3")
        val categoryAdapter =
            ArrayAdapter(requireContext(), android.R.layout.simple_spinner_item, foodCategories)
        categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        spinnerFoodCategory.adapter = categoryAdapter

        // Set up the spinner for Package Size Unit
        val packageSizeUnits = arrayOf("Unit 1", "Unit 2", "Unit 3")
        val unitAdapter =
            ArrayAdapter(requireContext(), android.R.layout.simple_spinner_item, packageSizeUnits)
        unitAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        spinnerPackageSizeUnit.adapter = unitAdapter

        // Set up the spinner for Dietary Restrictions
        val dietaryRestrictions = arrayOf("Restriction 1", "Restriction 2", "Restriction 3")
        val restrictionAdapter =
            ArrayAdapter(requireContext(), android.R.layout.simple_spinner_item, dietaryRestrictions)
        restrictionAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        spinnerFoodCategory.adapter = restrictionAdapter


        // Find the submit button by its ID
        submitButton = view.findViewById<Button>(R.id.submitButton)

        return binding.root

    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {

        val recyclerView = binding.root.findViewById<RecyclerView>(R.id.list)
        recyclerView.layoutManager = LinearLayoutManager(context)

        // Use ViewTreeObserver to wait until the RecyclerView is attached to the window
        recyclerView.viewTreeObserver.addOnPreDrawListener(
            object : ViewTreeObserver.OnPreDrawListener {
                override fun onPreDraw(): Boolean {
                    if (recyclerView.isAttachedToWindow) {
                        // RecyclerView is attached, set the adapter
                        recyclerView.adapter =
                            arguments?.getInt(ARG_ITEM_COUNT)?.let { EntryAdapter(it) }
                        recyclerView.viewTreeObserver.removeOnPreDrawListener(this)
                    }
                    return true
                }
            }
        )

        // Set up the click listener
        submitButton.setOnClickListener {
            Log.d("AddEntryDialogFragment", "Submit button clicked")
            onSubmitClicked(it) // Call your existing method
        }
    }

    fun onSubmitClicked(view: View) {
        // Retrieve values from the form
        val foodName = editTextFoodName.text.toString()
        val foodCategory = spinnerFoodCategory.selectedItem.toString()
        val foodQuantity = editTextFoodQuantity.text.toString().toIntOrNull() ?: 0
        val packageSizeUnit = spinnerPackageSizeUnit.selectedItem.toString()
        val description = editTextDescription.text.toString()
        val dietaryRestrictions = spinnerDietaryRestrictions.selectedItem.toString()

        // Retrieve expiration date from DatePicker
        val expirationDate = Calendar.getInstance()
        expirationDate.set(
            datePickerExpiration.year,
            datePickerExpiration.month,
            datePickerExpiration.dayOfMonth
        )

        // Create a new food
        val food = Food(
            foodName,
            foodCategory,
            description,
            dietaryRestrictions,
            foodQuantity.toString(),
            packageSizeUnit,
            expirationDate.toString(),
        )

        val retrofit = RetrofitClient.getClient(BASE_URL)
        val apiService: ApiService = retrofit.create(ApiService::class.java)
        apiService.createFood(food)
        Log.i("AddEntryDialogFragment", "Food added: $food")
    }

    private inner class EntryAdapter(private val mItemCount: Int) :
        RecyclerView.Adapter<ViewHolder>() {

        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
            val view = FragmentAddEntryDialogItemBinding.inflate(
                LayoutInflater.from(parent.context),
                parent,
                false
            )
            return ViewHolder(view)
        }

        override fun onBindViewHolder(holder: ViewHolder, position: Int) {
            //holder.text.text = position.toString()
        }

        override fun getItemCount(): Int {
            return mItemCount
        }
    }

    private inner class ViewHolder(binding: FragmentAddEntryDialogItemBinding) :
        RecyclerView.ViewHolder(binding.root) {
        //val text: TextView = binding.text
    }

    companion object {

        // TODO: Customize parameters
        // Currently using restaurant for testing
        fun newInstance(itemCount: Int): AddEntryDialogFragment =
            AddEntryDialogFragment().apply {
                arguments = Bundle().apply {
                    putInt(ARG_ITEM_COUNT, itemCount)
                }
            }

    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    fun setOnDismissListener(listener: OnDismissListener) {
        dismissListener = listener
    }

    override fun onDismiss(dialog: DialogInterface) {
        super.onDismiss(dialog)
        dismissListener?.onDismiss()
    }

}